# Generated by Django 5.2.3 on 2025-06-17 19:02

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notebooks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notebook',
                'verbose_name_plural': 'Notebooks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_type', models.CharField(choices=[('file', 'File Upload'), ('url', 'URL'), ('text', 'Pasted Text')], max_length=20)),
                ('title', models.CharField(blank=True, help_text='Optional display title or original filename/URL', max_length=512)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('needs_processing', models.BooleanField(default=False, help_text='Whether this source must go through a background processing job')),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('done', 'Done'), ('error', 'Error')], default='pending', max_length=20)),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='notebooks.notebook')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(help_text='E.g. ocr, transcribe, pdf2md…', max_length=50)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('finished', 'Finished'), ('failed', 'Failed')], default='queued', max_length=20)),
                ('result_file', models.FileField(blank=True, help_text='Generated .md or other output file', null=True, upload_to='processing_results/%Y/%m/%d/')),
                ('error_message', models.TextField(blank=True, help_text='Error details if processing failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='notebooks.source')),
            ],
        ),
        migrations.CreateModel(
            name='PastedTextFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Auto-generated .txt of pasted content', upload_to='pasted_text/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['txt'])])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pasted_text_file', to='notebooks.source')),
            ],
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Original user-uploaded file (PDF, MP3, MP4, etc.)', upload_to='source_uploads/%Y/%m/%d/')),
                ('content_type', models.CharField(blank=True, help_text='Guessed MIME type, e.g. application/pdf, audio/mpeg…', max_length=100)),
                ('original_name', models.CharField(help_text='Filename as uploaded by the user', max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='upload', to='notebooks.source')),
            ],
        ),
        migrations.CreateModel(
            name='URLProcessingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_md', models.TextField(blank=True, help_text='Markdown extracted from a webpage, if applicable')),
                ('downloaded_file', models.FileField(blank=True, help_text='Media file downloaded from the URL, if any', null=True, upload_to='downloaded_media/%Y/%m/%d/')),
                ('error_message', models.TextField(blank=True, help_text='Error details if crawl or download failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='url_result', to='notebooks.source')),
            ],
        ),
        migrations.CreateModel(
            name='KnowledgeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, help_text='Inline text for imported/pasted/URL-converted items')),
                ('file', models.FileField(blank=True, help_text='Standalone .md or .txt file, if this item was stored on disk', null=True, upload_to='knowledge_items/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['md', 'txt'])])),
                ('metadata', models.JSONField(blank=True, help_text='Optional structural metadata (headings, timestamps, etc.)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_items', to='notebooks.notebook')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='knowledge_items', to='notebooks.source')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['notebook', 'source'], name='notebooks_k_noteboo_188821_idx')],
            },
        ),
    ]
